@model RCM.Presentation.Web.ViewModels.ProdutosIndexViewModel

@{
    ViewData["Title"] = "Produtos - Índice";
}

<float-action-button controller="Produtos"></float-action-button>

<div class="form-container col s12 m12">
    <form>
        <div class="col s12 m12">
            <div class="row my-0 py-0">
                <div class="input-field col s5 m5">
                    <label for="nome">Nome do Produto</label>
                    <input asp-for="Nome" name="nome" type="text" id="nome" />
                </div>
                <div class="input-field col s4 m3">
                    <select>
                        <option value="nome">Nome do Produto</option>
                    </select>
                </div>
                <div class="col s4 m4 pt-2 px-0 mx-0 max-percent-width">
                    <a class="btn waves-effect purple left no-border col s1 m2" id="advancedSearchToggler">
                        <i class="material-icons center">keyboard_arrow_down</i>
                    </a>
                    <button type="submit" class="btn waves-effect purple no-border col s11 m10">
                        <i class="material-icons right">search</i>
                        Pesquisar
                    </button>
                </div>
            </div>
        </div>

        <div id="advancedSearch" class="col s12 m12">
            <div class="row">
                <div class="input-field col s12 m3">
                    <input asp-for="MinValor" name="minValor" type="text" class="input-field" id="minValor" />
                    <label for="minValor">Preço mínimo</label>
                </div>
                <div class="input-field col s12 m3">
                    <input asp-for="MaxValor" name="maxValor" type="text" class="input-field" id="maxValor" />
                    <label for="maxValor">Preço máximo</label>
                </div>
                <div class="input-field col s12 m3">
                    <input asp-for="MinEstoque" name="minEstoque" type="text" id="minEstoque" />
                    <label for="minEstoque">Estoque mínimo</label>
                </div>
                <div class="input-field col s12 m3">
                    <input asp-for="MaxEstoque" name="maxEstoque" type="text" id="maxEstoque" />
                    <label for="maxEstoque">Estoque máximo</label>
                </div>
                <div class="input-field col s12 m6">
                    <select asp-for="MarcaId" name="marcaId" asp-items="@(new SelectList(Model.Marcas, "Id", "Nome"))" id="marcaId">
                        <option value="">Todos as Marcas</option>
                    </select>
                    <label for="marcaId">Escolher Marca</label>
                </div>
                <div class="input-field col s12 m6">
                    <input asp-for="ProdutoId" name="produtoId" type="text" id="produtoId" />
                    <label for="produtoId">Id do Produto</label>
                </div>
                <div class="input-field col s12 m4">
                    <input asp-for="ReferenciaFabricante" name="referenciaFabricante" type="text" id="referenciaFabricante" />
                    <label for="referenciaFabricante">Referência do Fabricante</label>
                </div>
                <div class="input-field col s12 m4">
                    <input asp-for="ReferenciaOriginal" name="referenciaOriginal" type="text" id="referenciaOriginal" />
                    <label for="produtoId">Referência Original</label>
                </div>
                <div class="input-field col s12 m4">
                    <input asp-for="ReferenciaAuxiliar" name="referenciaAuxiliar" type="text" id="referenciaAuxiliar" />
                    <label for="referenciaAuxiliar">Referência Auxiliar</label>
                </div>
            </div>
        </div>
    </form>

    @if (Model.Produtos.List.Any())
    {
        <div class="mx-2">
            <table class="highlight">
                <thead>
                    <tr>
                        <th>
                            @Html.DisplayNameFor(model => model.Produtos.List.FirstOrDefault().Id)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Produtos.List.FirstOrDefault().Nome)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Produtos.List.FirstOrDefault().Estoque)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Produtos.List.FirstOrDefault().PrecoVenda)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Produtos.List.FirstOrDefault().Marca.Nome)
                        </th>
                    </tr>
                </thead>
                <tbody class="table-body">
                    @foreach (var item in Model.Produtos.List)
                    {
                        <tr class="@(item.ItemEstoqueRazoavel ? "bg-warning" : "") @(item.ItemEstoqueBaixo ? "bg-danger" : "")">
                            <td>
                                @Html.DisplayFor(modelItem => item.Id)
                            </td>
                            <td style="width: 35%">
                                @Html.DisplayFor(modelItem => item.Nome)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Estoque)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.PrecoVenda)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Marca.Nome)
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="col s12 m12">
            <ul class="pagination center pt-2">
                @{
                    var queryStringHelper = new Dictionary<string, string>
                            {
                                { "marcaId", Model.MarcaId?.ToString() },
                                { "minValor", Model.MinValor?.ToString() },
                                { "maxValor", Model.MaxValor?.ToString() },
                                { "minEstoque", Model.MinEstoque.ToString() },
                                { "maxEstoque", Model.MaxEstoque.ToString() },
                                { "nome", Model.Nome?.ToString() },
                                { "referenciaFabricante", Model.ReferenciaFabricante?.ToString() },
                                { "referenciaOriginal", Model.ReferenciaOriginal?.ToString() },
                                { "referenciaAuxiliar", Model.ReferenciaAuxiliar?.ToString() },
                                { "produtoId", Model.ProdutoId?.ToString() },
                                { "pageSize", Model.Produtos.PageSize.ToString() },
                            };

                    var listHelper = new Dictionary<string, string>().LoadPagination(Model.Produtos);
                }

                @Html.Partial("_Pagination", new ViewDataDictionary(this.ViewData)
                {
                    { "listHelper", listHelper },
                    { "queryStringHelper", queryStringHelper }
                })
            </ul>
        </div>
    }
    else
    {
        <p class="px-1 col s12 m12">
            <i class="material-icons left">warning</i>
            Nenhum produto encontrado.
        </p>
    }
</div>